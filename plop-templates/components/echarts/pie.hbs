<template lang="pug">
div(ref="container")
</template>

<script setup>
import { ref, computed, defineProps, watch, onMounted, onBeforeUnmount } from 'vue'
import * as echarts from 'echarts'
import { merge, isEmpty, debounce } from 'lodash'

const props = defineProps({
  width: {
    type: Number,
  },
  height: {
    type: Number,
    default: 320,
  },
  data: {
    type: Object,
    default: () => {
      return {
        // series: [
        //   {
        //     name: 'Access From',
        //     data: [
        //       { value: 1048, name: 'Search Engine' },
        //       { value: 735, name: 'Direct' },
        //       { value: 580, name: 'Email' },
        //       { value: 484, name: 'Union Ads' },
        //       { value: 300, name: 'Video Ads' }
        //     ]
        //   },
        // ],
      }
    },
  },
})

// 图表容器
const container = ref(null)

// echarts图表对象
let chart = null

// 基础Options
const initOption = {
  tooltip: {
    trigger: 'item'
  },
  legend: {
    bottom: 0,
    left: 'center'
  },
  series: [
    {
      type: 'pie',
      radius: '50%',
      center: ["50%", "45%"],
      emphasis: {
        itemStyle: {
          shadowBlur: 10,
          shadowOffsetX: 0,
          shadowColor: 'rgba(0, 0, 0, 0.5)'
        }
      }
    }
  ]
}

function draw(container) {
  if (props.width) {
    container.style.width = props.width + 'px'
  }
  container.style.height = props.height + 'px'

  setTimeout(() => {
    chart = echarts.init(container)
    let option = {}

    if (isEmpty(props.data)) {
      option = {
        graphic: {
          type: 'text',
          left: 'center',
          top: '50%',
          zlevel: 9999,
          silent: true,
          invisible: false,
          style: {
            fill: '#aaa',
            text: '暂无数据',
            fontSize: '14px',
          },
        },
      }
    } else {
      option = merge({}, initOption, props.data, { graphic: { invisible: true } })
    }
    chart.setOption(option/*, true*/)
  }, 0)
}

watch(
  () => props.data,
  () => {
    draw(container.value)
  },
)

const onResize = debounce(() => {
  chart && chart.resize()
  // console.log('触发resize')
}, 100)

onMounted(() => {
  draw(container.value)
  window.addEventListener('resize', onResize)
  // console.log('侦听resize')
})

onBeforeUnmount(() => {
  window.removeEventListener('resize', onResize)
  // console.log('取消侦听resize')
})
</script>
